else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
d <- data.frame(eval(parse(text=expr)))
}
df3 <- ifelsedata(df1, cm)
df3
df1 <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 100, ncol = 10))
df2 <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 100, ncol = 10))
df1
df2
rbenchmark::benchmark("loop" = {
df3 <- df1
r <- min(c(nrow(df1), nrow(df2)))
c <- min(c(ncol(df1), ncol(df2)))
for (r in 1:r)
for (c in 1:c)
df3[r, c] <- ifelse(df1[r, c] == df2[r, c], TRUE, FALSE)
},
"smart?" = {
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
d <- data.frame(eval(parse(text=expr)))
}
df3 <- ifelsedata(df1, df2)
},
replications = 10,
order = "user.self")
df1 <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 1000, ncol = 10))
df2 <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 1000, ncol = 10))
df1
df2
rbenchmark::benchmark("loop" = {
df3 <- df1
r <- min(c(nrow(df1), nrow(df2)))
c <- min(c(ncol(df1), ncol(df2)))
for (r in 1:r)
for (c in 1:c)
df3[r, c] <- ifelse(df1[r, c] == df2[r, c], TRUE, FALSE)
},
"smart?" = {
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
d <- data.frame(eval(parse(text=expr)))
}
df3 <- ifelsedata(df1, df2)
},
replications = 10,
order = "user.self")
df1 <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10000, ncol = 10))
df2 <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10000, ncol = 10))
df1
df2
rbenchmark::benchmark(
#   "loop" = {
#   df3 <- df1
#   r <- min(c(nrow(df1), nrow(df2)))
#   c <- min(c(ncol(df1), ncol(df2)))
#   for (r in 1:r)
#     for (c in 1:c)
#       df3[r, c] <- ifelse(df1[r, c] == df2[r, c], TRUE, FALSE)
# },
"smart?" = {
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
d <- data.frame(eval(parse(text=expr)))
}
df3 <- ifelsedata(df1, df2)
},
replications = 10,
order = "user.self")
df1 <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10000, ncol = 100))
df2 <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10000, ncol = 10))
df1
df2
df1 <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10000, ncol = 100))
df2 <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10000, ncol = 100))
df1
df2
rbenchmark::benchmark(
#   "loop" = {
#   df3 <- df1
#   r <- min(c(nrow(df1), nrow(df2)))
#   c <- min(c(ncol(df1), ncol(df2)))
#   for (r in 1:r)
#     for (c in 1:c)
#       df3[r, c] <- ifelse(df1[r, c] == df2[r, c], TRUE, FALSE)
# },
"smart?" = {
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
d <- data.frame(eval(parse(text=expr)))
}
df3 <- ifelsedata(df1, df2)
},
replications = 10,
order = "user.self")
rbenchmark::benchmark(
#   "loop" = {
#   df3 <- df1
#   r <- min(c(nrow(df1), nrow(df2)))
#   c <- min(c(ncol(df1), ncol(df2)))
#   for (r in 1:r)
#     for (c in 1:c)
#       df3[r, c] <- ifelse(df1[r, c] == df2[r, c], TRUE, FALSE)
# },
"smart?" = {
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
d <- data.frame(eval(parse(text=expr)))
}
df3 <- ifelsedata(df1, df2)
},
replications = 1,
order = "user.self")
df1 <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 100000, ncol = 100))
df2 <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 100000, ncol = 100))
df3
rbenchmark::benchmark(
"loop" = {
df3 <- df1
r <- min(c(nrow(df1), nrow(df2)))
c <- min(c(ncol(df1), ncol(df2)))
for (r in 1:r)
for (c in 1:c)
df3[r, c] <- ifelse(df1[r, c] == df2[r, c], TRUE, FALSE)
},
"smart?" = {
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
d <- data.frame(eval(parse(text=expr)))
}
df3 <- ifelsedata(df1, df2, "==")
},
replications = 1,
order = "user.self")
df1 <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 1000, ncol = 100))
df2 <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 1000, ncol = 100))
rbenchmark::benchmark(
"loop" = {
df3 <- df1
r <- min(c(nrow(df1), nrow(df2)))
c <- min(c(ncol(df1), ncol(df2)))
for (r in 1:r)
for (c in 1:c)
df3[r, c] <- ifelse(df1[r, c] == df2[r, c], TRUE, FALSE)
},
"smart?" = {
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
d <- data.frame(eval(parse(text=expr)))
}
df3 <- ifelsedata(df1, df2, "==")
},
replications = 1,
order = "user.self")
df3
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
return(data.frame(eval(parse(text=expr))))
}
df3 <- ifelsedata(df1, df2, "==")
df3
r <- 1000
c <- 100
df1 <- data.frame(matrix(data = sample(1:10, r*c, TRUE), nrow = r, ncol = c))
df2 <- data.frame(matrix(data = sample(1:10, r*c, TRUE), nrow = r, ncol = c))
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
return(data.frame(eval(parse(text=expr))))
}
df3 <- ifelsedata(df1, df2, "==")
df3
sum(!is.na(df3))
r*c
rbenchmark::benchmark(
"loop" = {
df3 <- df1
r <- min(c(nrow(df1), nrow(df2)))
c <- min(c(ncol(df1), ncol(df2)))
for (r in 1:r)
for (c in 1:c)
df3[r, c] <- ifelse(df1[r, c] == df2[r, c], TRUE, FALSE)
},
"smart?" = {
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
return(data.frame(eval(parse(text=expr))))
}
df3 <- ifelsedata(df1, df2, "==")
},
replications = 1,
order = "user.self")
r <- 10000
c <- 100
df1 <- data.frame(matrix(data = sample(1:10, r*c, TRUE), nrow = r, ncol = c))
df2 <- data.frame(matrix(data = sample(1:10, r*c, TRUE), nrow = r, ncol = c))
rbenchmark::benchmark(
"loop" = {
df3 <- df1
r <- min(c(nrow(df1), nrow(df2)))
c <- min(c(ncol(df1), ncol(df2)))
for (r in 1:r)
for (c in 1:c)
df3[r, c] <- ifelse(df1[r, c] == df2[r, c], TRUE, FALSE)
},
"smart?" = {
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
return(data.frame(eval(parse(text=expr))))
}
df3 <- ifelsedata(df1, df2, "==")
},
replications = 1,
order = "user.self")
parSapply(as.list(d1), as.vector)
library(parallel)
parSapply(as.list(d1), as.vector)
rbenchmark::benchmark(
#   "loop" = {
#   df3 <- df1
#   r <- min(c(nrow(df1), nrow(df2)))
#   c <- min(c(ncol(df1), ncol(df2)))
#   for (r in 1:r)
#     for (c in 1:c)
#       df3[r, c] <- ifelse(df1[r, c] == df2[r, c], TRUE, FALSE)
# },
"multi" = {
ifelsedata <- function(d1, d2, arg) {
clust <- makeCluster(detectCores())
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- parSapply(cl = clust, as.list(d1), as.vector)
l2 <- parSapply(cl = clust, as.list(d2), as.vector)
return(data.frame(eval(parse(text=expr))))
stopCluster(clust)
}
df3 <- ifelsedata(df1, df2, "==")
},
"no-multi" = {
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
return(data.frame(eval(parse(text=expr))))
}
df3 <- ifelsedata(df1, df2, "==")
}
replications = 1,
rbenchmark::benchmark(
#   "loop" = {
#   df3 <- df1
#   r <- min(c(nrow(df1), nrow(df2)))
#   c <- min(c(ncol(df1), ncol(df2)))
#   for (r in 1:r)
#     for (c in 1:c)
#       df3[r, c] <- ifelse(df1[r, c] == df2[r, c], TRUE, FALSE)
# },
"multi" = {
ifelsedata <- function(d1, d2, arg) {
clust <- makeCluster(detectCores())
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- parSapply(cl = clust, as.list(d1), as.vector)
l2 <- parSapply(cl = clust, as.list(d2), as.vector)
return(data.frame(eval(parse(text=expr))))
stopCluster(clust)
}
df3 <- ifelsedata(df1, df2, "==")
},
"no-multi" = {
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
return(data.frame(eval(parse(text=expr))))
}
df3 <- ifelsedata(df1, df2, "==")
},
replications = 1,
order = "user.self")
r <- 100000
c <- 100
df1 <- data.frame(matrix(data = sample(1:10, r*c, TRUE), nrow = r, ncol = c))
df2 <- data.frame(matrix(data = sample(1:10, r*c, TRUE), nrow = r, ncol = c))
rbenchmark::benchmark(
#   "loop" = {
#   df3 <- df1
#   r <- min(c(nrow(df1), nrow(df2)))
#   c <- min(c(ncol(df1), ncol(df2)))
#   for (r in 1:r)
#     for (c in 1:c)
#       df3[r, c] <- ifelse(df1[r, c] == df2[r, c], TRUE, FALSE)
# },
"multi" = {
ifelsedata <- function(d1, d2, arg) {
clust <- makeCluster(detectCores())
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- parSapply(cl = clust, as.list(d1), as.vector)
l2 <- parSapply(cl = clust, as.list(d2), as.vector)
return(data.frame(eval(parse(text=expr))))
stopCluster(clust)
}
df3 <- ifelsedata(df1, df2, "==")
},
"no-multi" = {
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
return(data.frame(eval(parse(text=expr))))
}
df3 <- ifelsedata(df1, df2, "==")
},
replications = 1,
order = "user.self")
r <- 1000000
c <- 100
df1 <- data.frame(matrix(data = sample(1:10, r*c, TRUE), nrow = r, ncol = c))
df2 <- data.frame(matrix(data = sample(1:10, r*c, TRUE), nrow = r, ncol = c))
rbenchmark::benchmark(
#   "loop" = {
#   df3 <- df1
#   r <- min(c(nrow(df1), nrow(df2)))
#   c <- min(c(ncol(df1), ncol(df2)))
#   for (r in 1:r)
#     for (c in 1:c)
#       df3[r, c] <- ifelse(df1[r, c] == df2[r, c], TRUE, FALSE)
# },
"multi" = {
ifelsedata <- function(d1, d2, arg) {
clust <- makeCluster(detectCores())
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- parSapply(cl = clust, as.list(d1), as.vector)
l2 <- parSapply(cl = clust, as.list(d2), as.vector)
return(data.frame(eval(parse(text=expr))))
stopCluster(clust)
}
df3 <- ifelsedata(df1, df2, "==")
},
"no-multi" = {
ifelsedata <- function(d1, d2, arg) {
if(missing(arg))
expr <- paste("ifelse(l2, l1, NA)", collapse = "")
else
expr <- paste("ifelse(l1", arg, "l2, l1, NA)", collapse = "")
r <- min(c(nrow(d1), nrow(d2)))
c <- min(c(ncol(d1), ncol(d2)))
d1 <- d1[1:r, 1:c]
d2 <- d2[1:r, 1:c]
l1 <- sapply(as.list(d1), as.vector)
l2 <- sapply(as.list(d2), as.vector)
return(data.frame(eval(parse(text=expr))))
}
df3 <- ifelsedata(df1, df2, "==")
},
replications = 1,
order = "user.self")
install.packages("pbapply")
library(dewey)
pkgdown::build_site()

[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gus Lipkin. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lipkin G (2023). dewey: R library variety things. https://dewey.guslipkin./, https://github.com/guslipkin/dewey.","code":"@Manual{,   title = {dewey: An R library for a variety of things},   author = {Gus Lipkin},   year = {2023},   note = {https://dewey.guslipkin.me/, https://github.com/guslipkin/dewey}, }"},{"path":"/index.html","id":"dewey-","dir":"","previous_headings":"","what":"An R library for a variety of things","title":"An R library for a variety of things","text":"R library variety things small collection functions may helpful STATA users regular human beings.","code":""},{"path":"/index.html","id":"install-process","dir":"","previous_headings":"","what":"Install Process","title":"An R library for a variety of things","text":"","code":"install.packages(\"devtools\") devtools::install_github(\"guslipkin/dewey\")"},{"path":"/index.html","id":"regsearch","dir":"","previous_headings":"","what":"regsearch","title":"An R library for a variety of things","text":"(data, dependent, independent, minvar = 1, maxvar, family, topN = 0, interactions = FALSE, multi = FALSE, ...) exhaustive search regression built base R","code":""},{"path":"/index.html","id":"ifelsedata","dir":"","previous_headings":"","what":"ifelsedata","title":"An R library for a variety of things","text":"(x, y, arg = NULL, matchCols = FALSE) Fast data.frame comparisons cell level","code":""},{"path":"/index.html","id":"difffill","dir":"","previous_headings":"","what":"diffFill","title":"An R library for a variety of things","text":"(x, lag = 1, differences = 1, ...) wrapper base diff function returns data.frame length input. Allows vector input lag differences.","code":""},{"path":"/index.html","id":"lagmultiple","dir":"","previous_headings":"","what":"lagMultiple","title":"An R library for a variety of things","text":"(x, k = 1) Appropriately lags input variable returns data.frame length input. Allows vector input k.","code":""},{"path":"/reference/diffFill.html","id":null,"dir":"Reference","previous_headings":"","what":"An extension on `diff` from base R that fills blank space with NA — diffFill","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"extension `diff` base R fills blank space NA","code":""},{"path":"/reference/diffFill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"","code":"diffFill(x, lag = 1, differences = 1, name = NULL, ...)"},{"path":"/reference/diffFill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"x numeric vector matrix containing values differenced lag (Optional) integer indicating lag use. `x` vector, `lag` can also vector. Defaults 1 differences (Optional) integer indicating order difference. `x` vector, `differences` can also vector. Defaults 1 name (Optional) name used lagged data.frame. Defaults name variable passed `x`. possible, `name` default \"X\". ... (Optional) arguments passed methods","code":""},{"path":"/reference/diffFill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"Returns vector length input, otherwise behaves   diff. input matrix, returns   matrix.","code":""},{"path":"/reference/diffFill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"","code":"# Creating dummy data # for 1 lag and 2 differences diffFill(rnorm(10), 1, 2) #>        x_l1d2 #> 1          NA #> 2          NA #> 3   3.6436427 #> 4  -4.4990801 #> 5   1.1338189 #> 6   0.4220543 #> 7   0.3251422 #> 8   1.7209838 #> 9  -1.8293894 #> 10 -1.2955908"},{"path":"/reference/ifelsedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast data.frame comparisons at the cell level — ifelsedata","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"Fast data.frame comparisons cell level","code":""},{"path":"/reference/ifelsedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"","code":"ifelsedata(x, y, arg = NULL, matchCols = FALSE)"},{"path":"/reference/ifelsedata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"x `data.frame` `matrix` y `data.frame` `matrix` dimensions `x` vector length matching rows `x` length 1. `y` `data.frame` `matrix` dimensions different `x`, larger trimmed match dimensions smaller. arg (Optional) logical test expression including `x` `y`. `arg` included, assumed values `y` logical. matchCols (Optional) boolean determines columns matched based name position. Columns returned order `x`. Columns present `x` returned. Defaults `FALSE`.","code":""},{"path":"/reference/ifelsedata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"Returns data.frame smallest size rows columns.   cells returned `x` test passes `NA`   pass.","code":""},{"path":"/reference/ifelsedata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"","code":"# create dummy data x <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10, ncol = 10)) y <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10, ncol = 10))  # test for equality ifelsedata(x, y, \"x >= y | x == y - 2\") #>    X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 #> 1   4 NA  7  1 NA  6 NA  7  4  NA #> 2   8 NA  6  8 NA NA  2  6  4   5 #> 3  NA 10 NA  1 NA NA  4  8  9  NA #> 4  10  8  9 NA  7  8  9 NA NA   9 #> 5  NA 10 NA  2 10 10  6 NA 10  NA #> 6   8  6 NA NA  9  9  7 NA NA  NA #> 7  NA NA  8 10 NA  9 10 NA  7  NA #> 8   5  8  2 NA NA  2 NA NA  7  NA #> 9   2 10 NA  2  9 NA 10  5  2   6 #> 10 NA  4 NA  8 NA NA  4 NA  1   8  # rename x columns colnames(x) <- paste0(\"X\", 5:14) # match with column names ifelsedata(x, y, \"x >= y | x == y - 2\", TRUE) #>    X5 X6 X7 X8 X9 X10 #> 1  NA  6  7 NA  4  NA #> 2   8 NA  6  8  7   1 #> 3   4 10 NA  1  1  NA #> 4  10  8  9 NA  7   8 #> 5  NA 10  6 NA 10  10 #> 6   8 NA NA NA  9   9 #> 7  NA NA  8 10  5   9 #> 8  NA  8 NA NA NA  NA #> 9  NA 10  4 NA  9   1 #> 10 NA NA  6  8  5   4  # match based on booleans in y y <- data.frame(matrix(data = sample(c(TRUE, FALSE), 100, TRUE),                        nrow = 10,                        ncol = 10)) # test based on TRUE/FALSE in y ifelsedata(x, y) #>    X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 #> 1  NA NA  7  1 NA  6 NA  7 NA   4 #> 2  NA  4  6  8 NA  1  2 NA  4  NA #> 3  NA 10 NA  1  1  4 NA  8  9  NA #> 4  NA  8  9  1  7  8 NA  1 NA  NA #> 5   3 10  6  2 10 NA NA NA 10  NA #> 6   8  6  1  2  9 NA NA  6  3   5 #> 7   9 NA  8 NA  5 NA NA NA NA  NA #> 8   5 NA  2 NA NA  2  4  3 NA   2 #> 9   2 10  4 NA NA NA NA NA  2   6 #> 10  1 NA NA NA NA  4  4  6  1  NA"},{"path":"/reference/lagMultiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"Compute lagged version input data multiple lags ","code":""},{"path":"/reference/lagMultiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"","code":"lagMultiple(x, k = 1, name = NULL)"},{"path":"/reference/lagMultiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"x vector, single column matrix, univariate time series. Can also multi-column matrix `k` length 1. k (Optional) integer vector containing number lags. Defaults 1 name (Optional) name used lagged data.frame. Defaults name variable passed `x`. possible, `name` default \"X\".","code":""},{"path":"/reference/lagMultiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"Returns data.frame lagged variable. number rows   length input vector. number columns   number lags used. column retains name original   variable includes number lags used column. `x`   multi-column matrix, returns matrix number columns   names.","code":""},{"path":"/reference/lagMultiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"","code":"# Creating dummy data x <- rnorm(10) # for lags 1-5 lagMultiple(x, 1:5) #>           x_l1        x_l2        x_l3        x_l4        x_l5 #> 1   0.03911271 -0.64469254 -0.38827184  0.44401656  0.10595721 #> 2  -0.64469254 -0.38827184  0.44401656  0.10595721 -0.18741438 #> 3  -0.38827184  0.44401656  0.10595721 -0.18741438 -0.64367702 #> 4   0.44401656  0.10595721 -0.18741438 -0.64367702 -0.61213026 #> 5   0.10595721 -0.18741438 -0.64367702 -0.61213026 -0.04637756 #> 6  -0.18741438 -0.64367702 -0.61213026 -0.04637756          NA #> 7  -0.64367702 -0.61213026 -0.04637756          NA          NA #> 8  -0.61213026 -0.04637756          NA          NA          NA #> 9  -0.04637756          NA          NA          NA          NA #> 10          NA          NA          NA          NA          NA  # 1 lag with a matrix of dummy data lagMultiple(matrix(1:100, 10, 10), 1) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    2   12   22   32   42   52   62   72   82    92 #>  [2,]    3   13   23   33   43   53   63   73   83    93 #>  [3,]    4   14   24   34   44   54   64   74   84    94 #>  [4,]    5   15   25   35   45   55   65   75   85    95 #>  [5,]    6   16   26   36   46   56   66   76   86    96 #>  [6,]    7   17   27   37   47   57   67   77   87    97 #>  [7,]    8   18   28   38   48   58   68   78   88    98 #>  [8,]    9   19   29   39   49   59   69   79   89    99 #>  [9,]   10   20   30   40   50   60   70   80   90   100 #> [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA"},{"path":"/reference/regsearch.html","id":null,"dir":"Reference","previous_headings":"","what":"An exhaustive search regression built on base R — regsearch","title":"An exhaustive search regression built on base R — regsearch","text":"exhaustive search regression built base R","code":""},{"path":"/reference/regsearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An exhaustive search regression built on base R — regsearch","text":"","code":"regsearch(   data,   dependent,   independent,   minvar = 1,   maxvar,   family,   topN = 0,   interactions = FALSE,   multi = FALSE,   ... )"},{"path":"/reference/regsearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An exhaustive search regression built on base R — regsearch","text":"data `data.frame` contains dependent variable independent variables. dependent dependent variable regression. independent vector independent variables used. must match column names `data`. can also include interaction terms made column names `data`. allows specific interaction terms used, rather every possible interaction done `interactions = TRUE`. minvar (Optional) minimum number independent variables used regression. Defaults 1. maxvar maximum number independent variables used regression. Must equal less number independent variables. interaction terms used, count one independent variable. family type regression. Passed `glm`. See glm information. topN (Optional) number top results printed upon run completion. Defaults 0. interactions (Optional) boolean indicating whether interaction terms used. Defaults `FALSE`. multi (Optional) boolean indicating whether multithreading used. Defaults `FALSE`. highly recommended use multithreading. ... (Optional) Function arguments passed glm","code":""},{"path":"/reference/regsearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An exhaustive search regression built on base R — regsearch","text":"Returns `data.table` information regressions run.   resulting data.table sorted descending order rSquare divided   mean p-value. generally reliable pushing quality   regressions top list. `formula` regression formula   used. `aic` aic regression. `rSquare`   calculated r-square regression. `warn` Currently unused. independent variable column contains p-values   variable interaction term given regression.","code":""},{"path":"/reference/regsearch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An exhaustive search regression built on base R — regsearch","text":"","code":"# Creating dummy data dt <- data.frame(\"dependent\" = sample(c(0, 1), 100, replace = TRUE), \"ind_1\" = runif(100, 0, 1), \"ind_2\" = runif(100, 0, 1), \"ind_3\" = runif(100, 0, 1), \"ind_4\" = runif(100, 0, 1))  # Without interaction terms and multithreading ## Two top results regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", 2) #> Warning: Missing 'interactions' argument. Defaulting to FALSE. #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Assembling regresions...\" #> [1] \"Creating 15 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 15 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -1.4949  -1.1981   0.9401   1.1158   1.3594   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|) #> (Intercept)  -0.5011     0.5154  -0.972    0.331 #> ind_1         0.6554     0.7359   0.891    0.373 #> ind_4         0.7032     0.7656   0.918    0.358 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 138.27  on 99  degrees of freedom #> Residual deviance: 136.51  on 97  degrees of freedom #> AIC: 142.51 #>  #> Number of Fisher Scoring iterations: 4 #>  #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>    Min      1Q  Median      3Q     Max   #> -1.462  -1.221   0.939   1.128   1.372   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|) #> (Intercept)  -0.5605     0.5882  -0.953    0.341 #> ind_1         0.6461     0.7374   0.876    0.381 #> ind_2         0.1348     0.6406   0.210    0.833 #> ind_4         0.6959     0.7662   0.908    0.364 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 138.27  on 99  degrees of freedom #> Residual deviance: 136.46  on 96  degrees of freedom #> AIC: 144.46 #>  #> Number of Fisher Scoring iterations: 4 #>  #>                                         formula      aic      bic rSquare warn #>  1:                 dependent ~ + ind_1 + ind_4 142.5053 150.3208 0.01276   NA #>  2:         dependent ~ + ind_1 + ind_2 + ind_4 144.4609 154.8816 0.01308   NA #>  3:         dependent ~ + ind_1 + ind_3 + ind_4 144.5023 154.9230 0.01278   NA #>  4:                         dependent ~ + ind_4 141.3038 146.5141 0.00698   NA #>  5: dependent ~ + ind_1 + ind_2 + ind_3 + ind_4 146.4584 159.4842 0.01310   NA #>  6:                         dependent ~ + ind_1 141.3572 146.5675 0.00660   NA #>  7:                 dependent ~ + ind_2 + ind_4 143.2334 151.0489 0.00749   NA #>  8:                 dependent ~ + ind_3 + ind_4 143.2697 151.0852 0.00723   NA #>  9:                 dependent ~ + ind_1 + ind_2 143.2936 151.1092 0.00706   NA #> 10:         dependent ~ + ind_2 + ind_3 + ind_4 145.2018 155.6225 0.00772   NA #> 11:                 dependent ~ + ind_1 + ind_3 143.3571 151.1726 0.00660   NA #> 12:         dependent ~ + ind_1 + ind_2 + ind_3 145.2936 155.7143 0.00706   NA #> 13:                 dependent ~ + ind_2 + ind_3 144.1523 151.9678 0.00085   NA #> 14:                         dependent ~ + ind_2 142.1719 147.3823 0.00070   NA #> 15:                         dependent ~ + ind_3 142.2475 147.4578 0.00016   NA #>     xIntercept     ind_1     ind_2     ind_3     ind_4 #>  1:  0.3308671 0.3731085        NA        NA 0.3583815 #>  2:  0.3406195 0.3809417 0.8332921        NA 0.3637671 #>  3:  0.4019967 0.3824943        NA 0.9569377 0.3575983 #>  4:  0.6202945        NA        NA        NA 0.3285351 #>  5:  0.3955666 0.3899512 0.8339157 0.9594924 0.3630483 #>  6:  0.5776676 0.3414683        NA        NA        NA #>  7:  0.5817247        NA 0.7908741        NA 0.3352401 #>  8:  0.6359655        NA        NA 0.8536337 0.3255300 #>  9:  0.5479413 0.3504516 0.8009956        NA        NA #> 10:  0.5894053        NA 0.7944590 0.8589336 0.3322281 #> 11:  0.6558815 0.3471964        NA 0.9928694        NA #> 12:  0.6091045 0.3558050 0.8010777 0.9959040        NA #> 13:  0.9547657        NA 0.7578417 0.8886398        NA #> 14:  0.9527065        NA 0.7552192        NA        NA #> 15:  0.8802303        NA        NA 0.8827580        NA ## No top results regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", FALSE, FALSE) #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Assembling regresions...\" #> [1] \"Creating 15 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 15 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>                                         formula      aic      bic rSquare warn #>  1:                 dependent ~ + ind_1 + ind_4 142.5053 150.3208 0.01276   NA #>  2:         dependent ~ + ind_1 + ind_2 + ind_4 144.4609 154.8816 0.01308   NA #>  3:         dependent ~ + ind_1 + ind_3 + ind_4 144.5023 154.9230 0.01278   NA #>  4:                         dependent ~ + ind_4 141.3038 146.5141 0.00698   NA #>  5: dependent ~ + ind_1 + ind_2 + ind_3 + ind_4 146.4584 159.4842 0.01310   NA #>  6:                         dependent ~ + ind_1 141.3572 146.5675 0.00660   NA #>  7:                 dependent ~ + ind_2 + ind_4 143.2334 151.0489 0.00749   NA #>  8:                 dependent ~ + ind_3 + ind_4 143.2697 151.0852 0.00723   NA #>  9:                 dependent ~ + ind_1 + ind_2 143.2936 151.1092 0.00706   NA #> 10:         dependent ~ + ind_2 + ind_3 + ind_4 145.2018 155.6225 0.00772   NA #> 11:                 dependent ~ + ind_1 + ind_3 143.3571 151.1726 0.00660   NA #> 12:         dependent ~ + ind_1 + ind_2 + ind_3 145.2936 155.7143 0.00706   NA #> 13:                 dependent ~ + ind_2 + ind_3 144.1523 151.9678 0.00085   NA #> 14:                         dependent ~ + ind_2 142.1719 147.3823 0.00070   NA #> 15:                         dependent ~ + ind_3 142.2475 147.4578 0.00016   NA #>     xIntercept     ind_1     ind_2     ind_3     ind_4 #>  1:  0.3308671 0.3731085        NA        NA 0.3583815 #>  2:  0.3406195 0.3809417 0.8332921        NA 0.3637671 #>  3:  0.4019967 0.3824943        NA 0.9569377 0.3575983 #>  4:  0.6202945        NA        NA        NA 0.3285351 #>  5:  0.3955666 0.3899512 0.8339157 0.9594924 0.3630483 #>  6:  0.5776676 0.3414683        NA        NA        NA #>  7:  0.5817247        NA 0.7908741        NA 0.3352401 #>  8:  0.6359655        NA        NA 0.8536337 0.3255300 #>  9:  0.5479413 0.3504516 0.8009956        NA        NA #> 10:  0.5894053        NA 0.7944590 0.8589336 0.3322281 #> 11:  0.6558815 0.3471964        NA 0.9928694        NA #> 12:  0.6091045 0.3558050 0.8010777 0.9959040        NA #> 13:  0.9547657        NA 0.7578417 0.8886398        NA #> 14:  0.9527065        NA 0.7552192        NA        NA #> 15:  0.8802303        NA        NA 0.8827580        NA  # With interaction terms and multithreading regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", TRUE, TRUE) #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Gathering variables...\" #> [1] \"WARNING: Using interaction terms without multithreading may take a very long time\" #> [1] \"Assembling regresions...\" #> [1] \"Creating 385 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 105 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -1.6655  -1.1921   0.8124   1.1342   1.4298   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|) #> (Intercept)   0.6204     0.7692   0.807    0.420 #> ind_3        -1.5993     1.3131  -1.218    0.223 #> ind_4        -1.5214     1.6048  -0.948    0.343 #> ind_3:ind_4   4.5781     2.8658   1.598    0.110 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 138.27  on 99  degrees of freedom #> Residual deviance: 134.62  on 96  degrees of freedom #> AIC: 142.62 #>  #> Number of Fisher Scoring iterations: 4 #>  #>                                        formula      aic      bic rSquare warn #>   1:                 dependent ~ + ind_3*ind_4 142.6173 153.0380 0.02641   NA #>   2:         dependent ~ + ind_3*ind_4 + ind_1 144.0950 157.1209 0.03019   NA #>   3:         dependent ~ + ind_3*ind_4 + ind_2 144.4206 157.4464 0.02783   NA #>   4: dependent ~ + ind_3*ind_4 + ind_1 + ind_2 145.9382 161.5692 0.03132   NA #>   5:   dependent ~ + ind_1*ind_4 + ind_3*ind_4 145.6978 161.3288 0.03306   NA #>  ---                                                                          #> 101:         dependent ~ + ind_2*ind_3 + ind_1 147.2936 160.3194 0.00706   NA #> 102:               dependent ~ + ind_2 + ind_3 144.1523 151.9678 0.00085   NA #> 103:                       dependent ~ + ind_2 142.1719 147.3823 0.00070   NA #> 104:                 dependent ~ + ind_2*ind_3 146.1511 156.5718 0.00085   NA #> 105:                       dependent ~ + ind_3 142.2475 147.4578 0.00016   NA #>      xIntercept     ind_1     ind_2     ind_3     ind_4 ind_1.ind_2 ind_1.ind_3 #>   1:  0.4199248        NA        NA 0.2232378 0.3431217          NA          NA #>   2:  0.6678149 0.4705920        NA 0.2220420 0.3624368          NA          NA #>   3:  0.5224838        NA 0.6576698 0.2091700 0.3202841          NA          NA #>   4:  0.7486319 0.4880024 0.6923043 0.2097495 0.3405966          NA          NA #>   5:  0.9716514 0.3596372        NA 0.2027834 0.7627338          NA          NA #>  ---                                                                            #> 101:  0.7407833 0.3561515 0.9149675 0.9962740        NA          NA          NA #> 102:  0.9547657        NA 0.7578417 0.8886398        NA          NA          NA #> 103:  0.9527065        NA 0.7552192        NA        NA          NA          NA #> 104:  0.9503169        NA 0.8640432 0.9223537        NA          NA          NA #> 105:  0.8802303        NA        NA 0.8827580        NA          NA          NA #>      ind_1.ind_4 ind_2.ind_3 ind_2.ind_4 ind_3.ind_4 ind_3.ind_2 ind_4.ind_2 #>   1:          NA          NA          NA   0.1101492          NA          NA #>   2:          NA          NA          NA   0.1273546          NA          NA #>   3:          NA          NA          NA   0.1024724          NA          NA #>   4:          NA          NA          NA   0.1194127          NA          NA #>   5:   0.5303457          NA          NA          NA          NA          NA #>  ---                                                                         #> 101:          NA   0.9935548          NA          NA          NA          NA #> 102:          NA          NA          NA          NA          NA          NA #> 103:          NA          NA          NA          NA          NA          NA #> 104:          NA   0.9717019          NA          NA          NA          NA #> 105:          NA          NA          NA          NA          NA          NA #>      ind_4.ind_3 #>   1:          NA #>   2:          NA #>   3:          NA #>   4:          NA #>   5:    0.107964 #>  ---             #> 101:          NA #> 102:          NA #> 103:          NA #> 104:          NA #> 105:          NA"}]

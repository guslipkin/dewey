[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gus Lipkin. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lipkin G (2022). dewey: R library variety things. R package version 0.1.4.","code":"@Manual{,   title = {dewey: An R library for a variety of things},   author = {Gus Lipkin},   year = {2022},   note = {R package version 0.1.4}, }"},{"path":"/index.html","id":"dewey-","dir":"","previous_headings":"","what":"An R library for a variety of things","title":"An R library for a variety of things","text":"R library variety things small collection functions may helpful STATA users regular human beings.","code":""},{"path":"/index.html","id":"install-process","dir":"","previous_headings":"","what":"Install Process","title":"An R library for a variety of things","text":"","code":"install.packages(\"devtools\") devtools::install_github(\"guslipkin/dewey\")"},{"path":"/index.html","id":"regsearch","dir":"","previous_headings":"","what":"regsearch","title":"An R library for a variety of things","text":"(data, dependent, independent, minvar = 1, maxvar, family, topN = 0, interactions = FALSE, multi = FALSE, ...) exhaustive search regression built base R","code":""},{"path":"/index.html","id":"ifelsedata","dir":"","previous_headings":"","what":"ifelsedata","title":"An R library for a variety of things","text":"(x, y, arg = NULL, matchCols = FALSE) Fast data.frame comparisons cell level","code":""},{"path":"/index.html","id":"difffill","dir":"","previous_headings":"","what":"diffFill","title":"An R library for a variety of things","text":"(x, lag = 1, differences = 1, ...) wrapper base diff function returns data.frame length input. Allows vector input lag differences.","code":""},{"path":"/index.html","id":"lagmultiple","dir":"","previous_headings":"","what":"lagMultiple","title":"An R library for a variety of things","text":"(x, k = 1) Appropriately lags input variable returns data.frame length input. Allows vector input k.","code":""},{"path":"/reference/diffFill.html","id":null,"dir":"Reference","previous_headings":"","what":"An extension on `diff` from base R that fills blank space with NA — diffFill","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"extension `diff` base R fills blank space NA","code":""},{"path":"/reference/diffFill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"","code":"diffFill(x, lag = 1, differences = 1, name = NULL, ...)"},{"path":"/reference/diffFill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"x numeric vector matrix containing values differenced lag (Optional) integer indicating lag use. `x` vector, `lag` can also vector. Defaults 1 differences (Optional) integer indicating order difference. `x` vector, `differences` can also vector. Defaults 1 name (Optional) name used lagged data.frame. Defaults name variable passed `x`. possible, `name` default \"X\". ... (Optional) arguments passed methods","code":""},{"path":"/reference/diffFill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"Returns vector length input, otherwise behaves   diff. input matrix, returns   matrix.","code":""},{"path":"/reference/diffFill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"","code":"# Creating dummy data # for 1 lag and 2 differences diffFill(rnorm(10), 1, 2) #>        x_l1d2 #> 1          NA #> 2          NA #> 3  -1.1353395 #> 4   0.3254967 #> 5  -0.5306390 #> 6   1.7824402 #> 7  -0.4310423 #> 8  -1.2872289 #> 9  -0.2338086 #> 10  2.2757676"},{"path":"/reference/ifelsedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast data.frame comparisons at the cell level — ifelsedata","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"Fast data.frame comparisons cell level","code":""},{"path":"/reference/ifelsedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"","code":"ifelsedata(x, y, arg = NULL, matchCols = FALSE)"},{"path":"/reference/ifelsedata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"x `data.frame` `matrix` y `data.frame` `matrix` dimensions `x` vector length matching rows `x` length 1. `y` `data.frame` `matrix` dimensions different `x`, larger trimmed match dimensions smaller. arg (Optional) logical test expression including `x` `y`. `arg` included, assumed values `y` logical. matchCols (Optional) boolean determines columns matched based name position. Columns returned order `x`. Columns present `x` returned. Defaults `FALSE`.","code":""},{"path":"/reference/ifelsedata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"Returns data.frame smallest size rows columns.   cells returned `x` test passes `NA`   pass.","code":""},{"path":"/reference/ifelsedata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"","code":"# create dummy data x <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10, ncol = 10)) y <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10, ncol = 10))  # test for equality ifelsedata(x, y, \"x >= y | x == y - 2\") #>    X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 #> 1  10 10 NA  3  7 NA NA  5  7  NA #> 2  NA 10  9 NA  8 NA NA 10 NA  10 #> 3   9 NA NA  9  8  2 NA 10  9   8 #> 4   8  2  6 NA  3 10 NA  6 NA   7 #> 5   2  9 NA  6 NA NA NA  6  4   8 #> 6   8  6  2  4  8 10  6 NA  7   4 #> 7   7  9  9 NA NA  5 NA  8  2  NA #> 8  NA NA  6 NA  5 NA NA NA NA   7 #> 9  NA NA NA  9  7  2 NA  8  3   5 #> 10  1  5  2 NA  3  9  8  8 NA   7  # rename x columns colnames(x) <- paste0(\"X\", 5:14) # match with column names ifelsedata(x, y, \"x >= y | x == y - 2\", TRUE) #>    X5 X6 X7 X8 X9 X10 #> 1  10 10 NA NA  7  NA #> 2  NA 10  9 NA  8  NA #> 3   9  5 NA  9  8  NA #> 4   8 NA NA  4 NA  10 #> 5  NA  9 NA  6  4  NA #> 6   8  6  2  4  8  10 #> 7  NA  9 NA NA  3  NA #> 8   4 NA NA NA  5  NA #> 9   6  2 NA  9  7   2 #> 10 NA  5  2 NA  3   9  # match based on booleans in y y <- data.frame(matrix(data = sample(c(TRUE, FALSE), 100, TRUE),                        nrow = 10,                        ncol = 10)) # test based on TRUE/FALSE in y ifelsedata(x, y) #>    X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 #> 1  10 NA NA NA  7  2  4 NA  7   4 #> 2   3 10 NA  1  8 NA NA NA  1  NA #> 3   9  5  1 NA  8 NA  3 NA  9  NA #> 4   8  2 NA NA NA 10  1 NA  3   7 #> 5   2  9  2 NA NA NA NA NA  4   8 #> 6   8 NA NA NA  8 NA NA NA NA  NA #> 7  NA NA  9 NA  3  5  6 NA  2  NA #> 8  NA  1  6  2  5 NA  5  3  2   7 #> 9   6 NA NA  9  7  2 NA NA NA   5 #> 10  1 NA NA  1  3 NA  8  8  4  NA"},{"path":"/reference/lagMultiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"Compute lagged version input data multiple lags ","code":""},{"path":"/reference/lagMultiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"","code":"lagMultiple(x, k = 1, name = NULL)"},{"path":"/reference/lagMultiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"x vector, single column matrix, univariate time series. Can also multi-column matrix `k` length 1. k (Optional) integer vector containing number lags. Defaults 1 name (Optional) name used lagged data.frame. Defaults name variable passed `x`. possible, `name` default \"X\".","code":""},{"path":"/reference/lagMultiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"Returns data.frame lagged variable. number rows   length input vector. number columns   number lags used. column retains name original   variable includes number lags used column. `x`   multi-column matrix, returns matrix number columns   names.","code":""},{"path":"/reference/lagMultiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"","code":"# Creating dummy data x <- rnorm(10) # for lags 1-5 lagMultiple(x, 1:5) #>          x_l1       x_l2       x_l3       x_l4       x_l5 #> 1  -1.9108293  1.2904017 -0.6440849 -0.4822443  0.4069840 #> 2   1.2904017 -0.6440849 -0.4822443  0.4069840 -0.8880513 #> 3  -0.6440849 -0.4822443  0.4069840 -0.8880513  1.3736180 #> 4  -0.4822443  0.4069840 -0.8880513  1.3736180 -1.3508290 #> 5   0.4069840 -0.8880513  1.3736180 -1.3508290 -0.2223385 #> 6  -0.8880513  1.3736180 -1.3508290 -0.2223385         NA #> 7   1.3736180 -1.3508290 -0.2223385         NA         NA #> 8  -1.3508290 -0.2223385         NA         NA         NA #> 9  -0.2223385         NA         NA         NA         NA #> 10         NA         NA         NA         NA         NA  # 1 lag with a matrix of dummy data lagMultiple(matrix(1:100, 10, 10), 1) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    2   12   22   32   42   52   62   72   82    92 #>  [2,]    3   13   23   33   43   53   63   73   83    93 #>  [3,]    4   14   24   34   44   54   64   74   84    94 #>  [4,]    5   15   25   35   45   55   65   75   85    95 #>  [5,]    6   16   26   36   46   56   66   76   86    96 #>  [6,]    7   17   27   37   47   57   67   77   87    97 #>  [7,]    8   18   28   38   48   58   68   78   88    98 #>  [8,]    9   19   29   39   49   59   69   79   89    99 #>  [9,]   10   20   30   40   50   60   70   80   90   100 #> [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA"},{"path":"/reference/regsearch.html","id":null,"dir":"Reference","previous_headings":"","what":"An exhaustive search regression built on base R — regsearch","title":"An exhaustive search regression built on base R — regsearch","text":"exhaustive search regression built base R","code":""},{"path":"/reference/regsearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An exhaustive search regression built on base R — regsearch","text":"","code":"regsearch(   data,   dependent,   independent,   minvar = 1,   maxvar,   family,   topN = 0,   interactions = FALSE,   multi = FALSE,   ... )"},{"path":"/reference/regsearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An exhaustive search regression built on base R — regsearch","text":"data `data.frame` contains dependent variable independent variables. dependent dependent variable regression. independent vector independent variables used. must match column names `data`. can also include interaction terms made column names `data`. allows specific interaction terms used, rather every possible interaction done `interactions = TRUE`. minvar (Optional) minimum number independent variables used regression. Defaults 1. maxvar maximum number independent variables used regression. Must equal less number independent variables. interaction terms used, count one independent variable. family type regression. Passed `glm`. See glm information. topN (Optional) number top results printed upon run completion. Defaults 0. interactions (Optional) boolean indicating whether interaction terms used. Defaults `FALSE`. multi (Optional) boolean indicating whether multithreading used. Defaults `FALSE`. highly recommended use multithreading. ... (Optional) Function arguments passed glm","code":""},{"path":"/reference/regsearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An exhaustive search regression built on base R — regsearch","text":"Returns `data.table` information regressions run.   resulting data.table sorted descending order rSquare divided   mean p-value. generally reliable pushing quality   regressions top list. `formula` regression formula   used. `aic` aic regression. `rSquare`   calculated r-square regression. `warn` Currently unused. independent variable column contains p-values   variable interaction term given regression.","code":""},{"path":"/reference/regsearch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An exhaustive search regression built on base R — regsearch","text":"","code":"# Creating dummy data dt <- data.frame(\"dependent\" = sample(c(0, 1), 100, replace = TRUE), \"ind_1\" = runif(100, 0, 1), \"ind_2\" = runif(100, 0, 1), \"ind_3\" = runif(100, 0, 1), \"ind_4\" = runif(100, 0, 1))  # Without interaction terms and multithreading ## Two top results regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", 2) #> Warning: Missing 'interactions' argument. Defaulting to FALSE. #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Assembling regresions...\" #> [1] \"Creating 15 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 15 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -1.3097  -1.1000  -0.9672   1.1814   1.4499   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|) #> (Intercept)   0.3678     0.4055   0.907    0.364 #> ind_3        -0.9899     0.7162  -1.382    0.167 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 138.27  on 99  degrees of freedom #> Residual deviance: 136.32  on 98  degrees of freedom #> AIC: 140.32 #>  #> Number of Fisher Scoring iterations: 4 #>  #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -1.4016  -1.1146  -0.9062   1.1911   1.4376   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|) #> (Intercept)   0.6766     0.5758   1.175    0.240 #> ind_3        -1.0769     0.7279  -1.479    0.139 #> ind_4        -0.5297     0.6931  -0.764    0.445 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 138.27  on 99  degrees of freedom #> Residual deviance: 135.74  on 97  degrees of freedom #> AIC: 141.74 #>  #> Number of Fisher Scoring iterations: 4 #>  #>                                         formula      aic      bic rSquare warn #>  1:                         dependent ~ + ind_3 140.3250 145.5353 0.01406   NA #>  2:                 dependent ~ + ind_3 + ind_4 141.7372 149.5527 0.01831   NA #>  3:         dependent ~ + ind_2 + ind_3 + ind_4 143.3096 153.7303 0.02140   NA #>  4: dependent ~ + ind_1 + ind_2 + ind_3 + ind_4 145.1652 158.1910 0.02245   NA #>  5:         dependent ~ + ind_1 + ind_3 + ind_4 143.6476 154.0683 0.01896   NA #>  6:                 dependent ~ + ind_2 + ind_3 141.9686 149.7841 0.01664   NA #>  7:         dependent ~ + ind_1 + ind_2 + ind_3 143.8694 154.2901 0.01736   NA #>  8:                 dependent ~ + ind_1 + ind_3 142.2660 150.0815 0.01449   NA #>  9:                 dependent ~ + ind_2 + ind_4 142.9736 150.7891 0.00937   NA #> 10:         dependent ~ + ind_1 + ind_2 + ind_4 144.8025 155.2232 0.01061   NA #> 11:                         dependent ~ + ind_2 141.3969 146.6073 0.00631   NA #> 12:                 dependent ~ + ind_1 + ind_2 143.2674 151.0829 0.00725   NA #> 13:                 dependent ~ + ind_1 + ind_4 143.8857 151.7012 0.00277   NA #> 14:                         dependent ~ + ind_4 141.9723 147.1827 0.00215   NA #> 15:                         dependent ~ + ind_1 142.2041 147.4144 0.00047   NA #>     xIntercept     ind_1     ind_2     ind_3     ind_4 #>  1:  0.3644701        NA        NA 0.1669472        NA #>  2:  0.2399461        NA        NA 0.1390539 0.4446792 #>  3:  0.5572327        NA 0.5137994 0.2000935 0.4186328 #>  4:  0.7376450 0.7040705 0.4880115 0.2036019 0.4032809 #>  5:  0.3822433 0.7647049        NA 0.1387531 0.4332203 #>  6:  0.8525280        NA 0.5508423 0.2346121        NA #>  7:  0.9784826 0.7529275 0.5292491 0.2395477        NA #>  8:  0.6022105 0.8080987        NA 0.1675809        NA #>  9:  0.6445072        NA 0.3199453        NA 0.5162141 #> 10:  0.5378428 0.6794105 0.3004048        NA 0.4964125 #> 11:  0.2699714        NA 0.3520451        NA        NA #> 12:  0.3035184 0.7190864 0.3349895        NA        NA #> 13:  0.9500504 0.7685571        NA        NA 0.5730869 #> 14:  0.8700749        NA        NA        NA 0.5862839 #> 15:  0.6039085 0.7985762        NA        NA        NA ## No top results regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", FALSE, FALSE) #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Assembling regresions...\" #> [1] \"Creating 15 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 15 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>                                         formula      aic      bic rSquare warn #>  1:                         dependent ~ + ind_3 140.3250 145.5353 0.01406   NA #>  2:                 dependent ~ + ind_3 + ind_4 141.7372 149.5527 0.01831   NA #>  3:         dependent ~ + ind_2 + ind_3 + ind_4 143.3096 153.7303 0.02140   NA #>  4: dependent ~ + ind_1 + ind_2 + ind_3 + ind_4 145.1652 158.1910 0.02245   NA #>  5:         dependent ~ + ind_1 + ind_3 + ind_4 143.6476 154.0683 0.01896   NA #>  6:                 dependent ~ + ind_2 + ind_3 141.9686 149.7841 0.01664   NA #>  7:         dependent ~ + ind_1 + ind_2 + ind_3 143.8694 154.2901 0.01736   NA #>  8:                 dependent ~ + ind_1 + ind_3 142.2660 150.0815 0.01449   NA #>  9:                 dependent ~ + ind_2 + ind_4 142.9736 150.7891 0.00937   NA #> 10:         dependent ~ + ind_1 + ind_2 + ind_4 144.8025 155.2232 0.01061   NA #> 11:                         dependent ~ + ind_2 141.3969 146.6073 0.00631   NA #> 12:                 dependent ~ + ind_1 + ind_2 143.2674 151.0829 0.00725   NA #> 13:                 dependent ~ + ind_1 + ind_4 143.8857 151.7012 0.00277   NA #> 14:                         dependent ~ + ind_4 141.9723 147.1827 0.00215   NA #> 15:                         dependent ~ + ind_1 142.2041 147.4144 0.00047   NA #>     xIntercept     ind_1     ind_2     ind_3     ind_4 #>  1:  0.3644701        NA        NA 0.1669472        NA #>  2:  0.2399461        NA        NA 0.1390539 0.4446792 #>  3:  0.5572327        NA 0.5137994 0.2000935 0.4186328 #>  4:  0.7376450 0.7040705 0.4880115 0.2036019 0.4032809 #>  5:  0.3822433 0.7647049        NA 0.1387531 0.4332203 #>  6:  0.8525280        NA 0.5508423 0.2346121        NA #>  7:  0.9784826 0.7529275 0.5292491 0.2395477        NA #>  8:  0.6022105 0.8080987        NA 0.1675809        NA #>  9:  0.6445072        NA 0.3199453        NA 0.5162141 #> 10:  0.5378428 0.6794105 0.3004048        NA 0.4964125 #> 11:  0.2699714        NA 0.3520451        NA        NA #> 12:  0.3035184 0.7190864 0.3349895        NA        NA #> 13:  0.9500504 0.7685571        NA        NA 0.5730869 #> 14:  0.8700749        NA        NA        NA 0.5862839 #> 15:  0.6039085 0.7985762        NA        NA        NA  # With interaction terms and multithreading regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", TRUE, TRUE) #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Gathering variables...\" #> [1] \"WARNING: Using interaction terms without multithreading may take a very long time\" #> [1] \"Assembling regresions...\" #> [1] \"Creating 385 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 105 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>     Min       1Q   Median       3Q      Max   #> -1.6632  -1.0361  -0.6371   1.0930   1.9149   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)   #> (Intercept)   -2.234      1.161  -1.925   0.0543 . #> ind_2          2.978      1.511   1.971   0.0487 * #> ind_3          4.177      1.869   2.234   0.0255 * #> ind_4          2.481      1.420   1.747   0.0807 . #> ind_2:ind_3   -5.245      2.846  -1.843   0.0653 . #> ind_3:ind_4   -6.372      2.586  -2.464   0.0138 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 138.27  on 99  degrees of freedom #> Residual deviance: 124.31  on 94  degrees of freedom #> AIC: 136.31 #>  #> Number of Fisher Scoring iterations: 4 #>  #>                                                    formula      aic      bic #>   1:               dependent ~ + ind_2*ind_3 + ind_3*ind_4 136.3128 151.9438 #>   2:               dependent ~ + ind_1*ind_4 + ind_2*ind_4 139.1183 154.7493 #>   3:                     dependent ~ + ind_2*ind_4 + ind_3 138.6394 151.6653 #>   4:                             dependent ~ + ind_2*ind_4 138.8437 149.2644 #>   5: dependent ~ + ind_1*ind_3 + ind_2*ind_3 + ind_3*ind_4 138.7356 159.5769 #>  ---                                                                         #> 101:                           dependent ~ + ind_1 + ind_2 143.2674 151.0829 #> 102:                             dependent ~ + ind_1*ind_2 145.2655 155.6862 #> 103:                           dependent ~ + ind_1 + ind_4 143.8857 151.7012 #> 104:                                   dependent ~ + ind_4 141.9723 147.1827 #> 105:                                   dependent ~ + ind_1 142.2041 147.4144 #>      rSquare warn xIntercept     ind_1      ind_2      ind_3       ind_4 #>   1: 0.10094   NA 0.05428103        NA 0.04868445 0.02545904 0.080688396 #>   2: 0.08065   NA 0.04862120 0.1791152 0.06664585         NA 0.006265461 #>   3: 0.06965   NA 0.04334376        NA 0.06232136 0.14240673 0.013622162 #>   4: 0.05370   NA 0.14174408        NA 0.10235293         NA 0.021294407 #>   5: 0.11234   NA 0.03247226 0.2719259 0.03831312 0.01637479 0.103773644 #>  ---                                                                     #> 101: 0.00725   NA 0.30351844 0.7190864 0.33498950         NA          NA #> 102: 0.00726   NA 0.49456495 0.8251016 0.63222944         NA          NA #> 103: 0.00277   NA 0.95005036 0.7685571         NA         NA 0.573086931 #> 104: 0.00215   NA 0.87007486        NA         NA         NA 0.586283916 #> 105: 0.00047   NA 0.60390846 0.7985762         NA         NA          NA #>      ind_1.ind_2 ind_1.ind_3 ind_1.ind_4 ind_2.ind_3 ind_2.ind_4 ind_3.ind_4 #>   1:          NA          NA          NA   0.0652815          NA  0.01375496 #>   2:          NA          NA  0.07106484          NA          NA          NA #>   3:          NA          NA          NA          NA  0.01436410          NA #>   4:          NA          NA          NA          NA  0.01846799          NA #>   5:          NA   0.2163953          NA          NA          NA  0.01675051 #>  ---                                                                         #> 101:          NA          NA          NA          NA          NA          NA #> 102:   0.9654111          NA          NA          NA          NA          NA #> 103:          NA          NA          NA          NA          NA          NA #> 104:          NA          NA          NA          NA          NA          NA #> 105:          NA          NA          NA          NA          NA          NA #>      ind_3.ind_2 ind_4.ind_2 ind_4.ind_3 #>   1:          NA          NA          NA #>   2:          NA 0.009455625          NA #>   3:          NA          NA          NA #>   4:          NA          NA          NA #>   5:  0.05182706          NA          NA #>  ---                                     #> 101:          NA          NA          NA #> 102:          NA          NA          NA #> 103:          NA          NA          NA #> 104:          NA          NA          NA #> 105:          NA          NA          NA"}]

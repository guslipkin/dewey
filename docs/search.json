[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gus Lipkin. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lipkin G (2022). dewey: R library variety things. R package version 0.1.4.","code":"@Manual{,   title = {dewey: An R library for a variety of things},   author = {Gus Lipkin},   year = {2022},   note = {R package version 0.1.4}, }"},{"path":"/index.html","id":"dewey-","dir":"","previous_headings":"","what":"An R library for a variety of things","title":"An R library for a variety of things","text":"R library variety things small collection functions may helpful STATA users regular human beings.","code":""},{"path":"/index.html","id":"install-process","dir":"","previous_headings":"","what":"Install Process","title":"An R library for a variety of things","text":"","code":"install.packages(\"devtools\") devtools::install_github(\"guslipkin/dewey\")"},{"path":"/index.html","id":"regsearch","dir":"","previous_headings":"","what":"regsearch","title":"An R library for a variety of things","text":"(data, dependent, independent, minvar = 1, maxvar, family, topN = 0, interactions = FALSE, multi = FALSE, ...) exhaustive search regression built base R","code":""},{"path":"/index.html","id":"ifelsedata","dir":"","previous_headings":"","what":"ifelsedata","title":"An R library for a variety of things","text":"(x, y, arg = NULL, matchCols = FALSE) Fast data.frame comparisons cell level","code":""},{"path":"/index.html","id":"difffill","dir":"","previous_headings":"","what":"diffFill","title":"An R library for a variety of things","text":"(x, lag = 1, differences = 1, ...) wrapper base diff function returns data.frame length input. Allows vector input lag differences.","code":""},{"path":"/index.html","id":"lagmultiple","dir":"","previous_headings":"","what":"lagMultiple","title":"An R library for a variety of things","text":"(x, k = 1) Appropriately lags input variable returns data.frame length input. Allows vector input k.","code":""},{"path":"/reference/diffFill.html","id":null,"dir":"Reference","previous_headings":"","what":"An extension on `diff` from base R that fills blank space with NA — diffFill","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"extension `diff` base R fills blank space NA","code":""},{"path":"/reference/diffFill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"","code":"diffFill(x, lag = 1, differences = 1, name = NULL, ...)"},{"path":"/reference/diffFill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"x numeric vector matrix containing values differenced lag (Optional) integer indicating lag use. `x` vector, `lag` can also vector. Defaults 1 differences (Optional) integer indicating order difference. `x` vector, `differences` can also vector. Defaults 1 name (Optional) name used lagged data.frame. Defaults name variable passed `x`. possible, `name` default \"X\". ... (Optional) arguments passed methods","code":""},{"path":"/reference/diffFill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"Returns vector length input, otherwise behaves   diff. input matrix, returns   matrix.","code":""},{"path":"/reference/diffFill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An extension on `diff` from base R that fills blank space with NA — diffFill","text":"","code":"# Creating dummy data # for 1 lag and 2 differences diffFill(rnorm(10), 1, 2) #>        x_l1d2 #> 1          NA #> 2          NA #> 3   0.7625255 #> 4   0.3834983 #> 5  -2.3337922 #> 6  -1.1269323 #> 7   5.2849774 #> 8  -4.3805940 #> 9   2.5217290 #> 10 -1.6263896"},{"path":"/reference/ifelsedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast data.frame comparisons at the cell level — ifelsedata","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"Fast data.frame comparisons cell level","code":""},{"path":"/reference/ifelsedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"","code":"ifelsedata(x, y, arg = NULL, matchCols = FALSE)"},{"path":"/reference/ifelsedata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"x `data.frame` `matrix` y `data.frame` `matrix` dimensions `x` vector length matching rows `x` length 1. `y` `data.frame` `matrix` dimensions different `x`, larger trimmed match dimensions smaller. arg (Optional) logical test expression including `x` `y`. `arg` included, assumed values `y` logical. matchCols (Optional) boolean determines columns matched based name position. Columns returned order `x`. Columns present `x` returned. Defaults `FALSE`.","code":""},{"path":"/reference/ifelsedata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"Returns data.frame smallest size rows columns.   cells returned `x` test passes `NA`   pass.","code":""},{"path":"/reference/ifelsedata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast data.frame comparisons at the cell level — ifelsedata","text":"","code":"# create dummy data x <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10, ncol = 10)) y <- data.frame(matrix(data = sample(1:10, 100, TRUE), nrow = 10, ncol = 10))  # test for equality ifelsedata(x, y, \"x >= y | x == y - 2\") #>    X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 #> 1  10  8  5 NA 10  5 NA NA NA  NA #> 2   9  9  6  6  3  9 NA NA NA   6 #> 3   7 NA NA NA  3  5 NA  5  9  NA #> 4   6 10  6 NA  7  1 NA  3  6   8 #> 5  NA  3 NA NA  9  4  5  6 10   6 #> 6  NA NA  6 NA  7  7  6  4  4   2 #> 7  NA 10  5 NA  8 10 NA  2 10  NA #> 8  NA NA NA  3 NA  5 NA NA  6  NA #> 9   9  7 NA  9  6  9  7  7  3   4 #> 10  8  8 NA NA  6  6 NA  6 NA  NA  # rename x columns colnames(x) <- paste0(\"X\", 5:14) # match with column names ifelsedata(x, y, \"x >= y | x == y - 2\", TRUE) #>    X5 X6 X7 X8 X9 X10 #> 1  10  8 NA NA 10   5 #> 2   9  9 NA NA  3   9 #> 3   7  5 NA  4  3   5 #> 4   6 10 NA  3  7  NA #> 5   4 NA  5  7  9   4 #> 6   5  3  6  7  7   7 #> 7  NA 10  5  2  8  10 #> 8  NA NA NA NA  9  NA #> 9   9  7 NA  9  6   9 #> 10  8  8 NA  6  6  NA  # match based on booleans in y y <- data.frame(matrix(data = sample(c(TRUE, FALSE), 100, TRUE),                        nrow = 10,                        ncol = 10)) # test based on TRUE/FALSE in y ifelsedata(x, y) #>    X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 #> 1  NA NA  5 NA NA NA NA NA NA   2 #> 2   9  9  6 NA  3 NA NA NA NA   6 #> 3  NA  5 NA  4 NA NA  5 NA NA   1 #> 4  NA 10  6 NA NA  1 NA  3  6  NA #> 5   4 NA  5  7 NA  4 NA NA 10   6 #> 6  NA  3  6  7  7  7 NA  4 NA   2 #> 7  NA NA  5 NA NA NA NA  2 10  NA #> 8   2  1  1  3 NA  5 NA  8  6  NA #> 9   9  7  2  9  6  9  7 NA  3  NA #> 10  8  8  2 NA  6 NA  1  6  1  NA"},{"path":"/reference/lagMultiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"Compute lagged version input data multiple lags ","code":""},{"path":"/reference/lagMultiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"","code":"lagMultiple(x, k = 1, name = NULL)"},{"path":"/reference/lagMultiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"x vector, single column matrix, univariate time series. Can also multi-column matrix `k` length 1. k (Optional) integer vector containing number lags. Defaults 1 name (Optional) name used lagged data.frame. Defaults name variable passed `x`. possible, `name` default \"X\".","code":""},{"path":"/reference/lagMultiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"Returns data.frame lagged variable. number rows   length input vector. number columns   number lags used. column retains name original   variable includes number lags used column. `x`   multi-column matrix, returns matrix number columns   names.","code":""},{"path":"/reference/lagMultiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a lagged version of the input data with multiple lags at once — lagMultiple","text":"","code":"# Creating dummy data x <- rnorm(10) # for lags 1-5 lagMultiple(x, 1:5) #>           x_l1        x_l2        x_l3        x_l4        x_l5 #> 1   0.86350640 -0.18405638  0.17291624 -1.65131075 -0.42342725 #> 2  -0.18405638  0.17291624 -1.65131075 -0.42342725 -1.21789569 #> 3   0.17291624 -1.65131075 -0.42342725 -1.21789569 -0.59766731 #> 4  -1.65131075 -0.42342725 -1.21789569 -0.59766731 -1.12143047 #> 5  -0.42342725 -1.21789569 -0.59766731 -1.12143047 -0.03696706 #> 6  -1.21789569 -0.59766731 -1.12143047 -0.03696706          NA #> 7  -0.59766731 -1.12143047 -0.03696706          NA          NA #> 8  -1.12143047 -0.03696706          NA          NA          NA #> 9  -0.03696706          NA          NA          NA          NA #> 10          NA          NA          NA          NA          NA  # 1 lag with a matrix of dummy data lagMultiple(matrix(1:100, 10, 10), 1) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    2   12   22   32   42   52   62   72   82    92 #>  [2,]    3   13   23   33   43   53   63   73   83    93 #>  [3,]    4   14   24   34   44   54   64   74   84    94 #>  [4,]    5   15   25   35   45   55   65   75   85    95 #>  [5,]    6   16   26   36   46   56   66   76   86    96 #>  [6,]    7   17   27   37   47   57   67   77   87    97 #>  [7,]    8   18   28   38   48   58   68   78   88    98 #>  [8,]    9   19   29   39   49   59   69   79   89    99 #>  [9,]   10   20   30   40   50   60   70   80   90   100 #> [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA    NA"},{"path":"/reference/regsearch.html","id":null,"dir":"Reference","previous_headings":"","what":"An exhaustive search regression built on base R — regsearch","title":"An exhaustive search regression built on base R — regsearch","text":"exhaustive search regression built base R","code":""},{"path":"/reference/regsearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An exhaustive search regression built on base R — regsearch","text":"","code":"regsearch(   data,   dependent,   independent,   minvar = 1,   maxvar,   family,   topN = 0,   interactions = FALSE,   multi = FALSE,   ... )"},{"path":"/reference/regsearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An exhaustive search regression built on base R — regsearch","text":"data `data.frame` contains dependent variable independent variables. dependent dependent variable regression. independent vector independent variables used. must match column names `data`. can also include interaction terms made column names `data`. allows specific interaction terms used, rather every possible interaction done `interactions = TRUE`. minvar (Optional) minimum number independent variables used regression. Defaults 1. maxvar maximum number independent variables used regression. Must equal less number independent variables. interaction terms used, count one independent variable. family type regression. Passed `glm`. See glm information. topN (Optional) number top results printed upon run completion. Defaults 0. interactions (Optional) boolean indicating whether interaction terms used. Defaults `FALSE`. multi (Optional) boolean indicating whether multithreading used. Defaults `FALSE`. highly recommended use multithreading. ... (Optional) Function arguments passed glm","code":""},{"path":"/reference/regsearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An exhaustive search regression built on base R — regsearch","text":"Returns `data.table` information regressions run.   resulting data.table sorted descending order rSquare divided   mean p-value. generally reliable pushing quality   regressions top list. `formula` regression formula   used. `aic` aic regression. `rSquare`   calculated r-square regression. `warn` Currently unused. independent variable column contains p-values   variable interaction term given regression.","code":""},{"path":"/reference/regsearch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An exhaustive search regression built on base R — regsearch","text":"","code":"# Creating dummy data dt <- data.frame(\"dependent\" = sample(c(0, 1), 100, replace = TRUE), \"ind_1\" = runif(100, 0, 1), \"ind_2\" = runif(100, 0, 1), \"ind_3\" = runif(100, 0, 1), \"ind_4\" = runif(100, 0, 1))  # Without interaction terms and multithreading ## Two top results regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", 2) #> Warning: Missing 'interactions' argument. Defaulting to FALSE. #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Assembling regresions...\" #> [1] \"Creating 15 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 15 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>      Min        1Q    Median        3Q       Max   #> -1.45386  -1.13922  -0.01042   1.12167   1.51772   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)   #> (Intercept)   0.9517     0.5575   1.707   0.0878 . #> ind_3        -0.8501     0.7367  -1.154   0.2486   #> ind_4        -1.0148     0.6810  -1.490   0.1362   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 138.63  on 99  degrees of freedom #> Residual deviance: 135.05  on 97  degrees of freedom #> AIC: 141.05 #>  #> Number of Fisher Scoring iterations: 4 #>  #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>      Min        1Q    Median        3Q       Max   #> -1.40260  -1.12177  -0.00659   1.13547   1.37031   #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|) #> (Intercept)   0.5193     0.4056   1.280    0.200 #> ind_4        -0.9995     0.6759  -1.479    0.139 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 138.63  on 99  degrees of freedom #> Residual deviance: 136.40  on 98  degrees of freedom #> AIC: 140.4 #>  #> Number of Fisher Scoring iterations: 4 #>  #>                                         formula      aic      bic rSquare warn #>  1:                 dependent ~ + ind_3 + ind_4 141.0523 148.8678 0.02580   NA #>  2:                         dependent ~ + ind_4 140.4003 145.6107 0.01608   NA #>  3:         dependent ~ + ind_1 + ind_3 + ind_4 142.8482 153.2689 0.02728   NA #>  4:         dependent ~ + ind_2 + ind_3 + ind_4 142.9523 153.3730 0.02652   NA #>  5: dependent ~ + ind_1 + ind_2 + ind_3 + ind_4 144.7600 157.7859 0.02791   NA #>  6:                 dependent ~ + ind_1 + ind_4 142.2610 150.0765 0.01708   NA #>  7:                 dependent ~ + ind_2 + ind_4 142.2886 150.1042 0.01689   NA #>  8:                         dependent ~ + ind_3 141.3190 146.5293 0.00945   NA #>  9:         dependent ~ + ind_1 + ind_2 + ind_4 144.1595 154.5801 0.01782   NA #> 10:                 dependent ~ + ind_1 + ind_3 142.8986 150.7141 0.01249   NA #> 11:         dependent ~ + ind_1 + ind_2 + ind_3 144.8915 155.3122 0.01254   NA #> 12:                 dependent ~ + ind_2 + ind_3 143.3091 151.1246 0.00952   NA #> 13:                         dependent ~ + ind_1 142.3067 147.5171 0.00233   NA #> 14:                 dependent ~ + ind_1 + ind_2 144.2956 152.1111 0.00241   NA #> 15:                         dependent ~ + ind_2 142.6157 147.8260 0.00010   NA #>     xIntercept     ind_1     ind_2     ind_3     ind_4 #>  1: 0.08779587        NA        NA 0.2485573 0.1361747 #>  2: 0.20044707        NA        NA        NA 0.1392170 #>  3: 0.09065219 0.6516882        NA 0.2378168 0.1559342 #>  4: 0.11707253        NA 0.7520301 0.2505700 0.1289921 #>  5: 0.10885422 0.6612888 0.7667101 0.2399973 0.1483548 #>  6: 0.21180631 0.7090221        NA        NA 0.1562093 #>  7: 0.25430795        NA 0.7384947        NA 0.1312350 #>  8: 0.31918806        NA        NA 0.2551493        NA #>  9: 0.23804313 0.7193622 0.7502362        NA 0.1477731 #> 10: 0.24314605 0.5177272        NA 0.2386245        NA #> 11: 0.29537504 0.5190633 0.9326073 0.2392710        NA #> 12: 0.40490059        NA 0.9209851 0.2558399        NA #> 13: 0.62492764 0.5704972        NA        NA        NA #> 14: 0.66007836 0.5720661 0.9160959        NA        NA #> 15: 0.91928733        NA 0.9067320        NA        NA ## No top results regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", FALSE, FALSE) #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Assembling regresions...\" #> [1] \"Creating 15 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 15 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>                                         formula      aic      bic rSquare warn #>  1:                 dependent ~ + ind_3 + ind_4 141.0523 148.8678 0.02580   NA #>  2:                         dependent ~ + ind_4 140.4003 145.6107 0.01608   NA #>  3:         dependent ~ + ind_1 + ind_3 + ind_4 142.8482 153.2689 0.02728   NA #>  4:         dependent ~ + ind_2 + ind_3 + ind_4 142.9523 153.3730 0.02652   NA #>  5: dependent ~ + ind_1 + ind_2 + ind_3 + ind_4 144.7600 157.7859 0.02791   NA #>  6:                 dependent ~ + ind_1 + ind_4 142.2610 150.0765 0.01708   NA #>  7:                 dependent ~ + ind_2 + ind_4 142.2886 150.1042 0.01689   NA #>  8:                         dependent ~ + ind_3 141.3190 146.5293 0.00945   NA #>  9:         dependent ~ + ind_1 + ind_2 + ind_4 144.1595 154.5801 0.01782   NA #> 10:                 dependent ~ + ind_1 + ind_3 142.8986 150.7141 0.01249   NA #> 11:         dependent ~ + ind_1 + ind_2 + ind_3 144.8915 155.3122 0.01254   NA #> 12:                 dependent ~ + ind_2 + ind_3 143.3091 151.1246 0.00952   NA #> 13:                         dependent ~ + ind_1 142.3067 147.5171 0.00233   NA #> 14:                 dependent ~ + ind_1 + ind_2 144.2956 152.1111 0.00241   NA #> 15:                         dependent ~ + ind_2 142.6157 147.8260 0.00010   NA #>     xIntercept     ind_1     ind_2     ind_3     ind_4 #>  1: 0.08779587        NA        NA 0.2485573 0.1361747 #>  2: 0.20044707        NA        NA        NA 0.1392170 #>  3: 0.09065219 0.6516882        NA 0.2378168 0.1559342 #>  4: 0.11707253        NA 0.7520301 0.2505700 0.1289921 #>  5: 0.10885422 0.6612888 0.7667101 0.2399973 0.1483548 #>  6: 0.21180631 0.7090221        NA        NA 0.1562093 #>  7: 0.25430795        NA 0.7384947        NA 0.1312350 #>  8: 0.31918806        NA        NA 0.2551493        NA #>  9: 0.23804313 0.7193622 0.7502362        NA 0.1477731 #> 10: 0.24314605 0.5177272        NA 0.2386245        NA #> 11: 0.29537504 0.5190633 0.9326073 0.2392710        NA #> 12: 0.40490059        NA 0.9209851 0.2558399        NA #> 13: 0.62492764 0.5704972        NA        NA        NA #> 14: 0.66007836 0.5720661 0.9160959        NA        NA #> 15: 0.91928733        NA 0.9067320        NA        NA  # With interaction terms and multithreading regsearch(dt, \"dependent\", c(\"ind_1\", \"ind_2\", \"ind_3\", \"ind_4\"), 1, 4, \"binomial\", TRUE, TRUE) #> Warning: Missing 'multi' argument. Defaulting to FALSE. #> [1] \"Gathering variables...\" #> [1] \"WARNING: Using interaction terms without multithreading may take a very long time\" #> [1] \"Assembling regresions...\" #> [1] \"Creating 385 formulas. Please be patient, this may take a while.\" #> [1] \"Creating regressions...\" #> [1] \"Running 105 regressions. Please be patient, this may take a while.\" #> [1] \"Running regressions...\" #>  #> Call: #> glm(formula = as.formula(x), family = family, data = data) #>  #> Deviance Residuals:  #>      Min        1Q    Median        3Q       Max   #> -1.67068  -1.14999   0.01097   1.11888   1.75037   #>  #> Coefficients: #>              Estimate Std. Error z value Pr(>|z|) #> (Intercept) -0.001498   0.991089  -0.002    0.999 #> ind_2        1.805440   1.544808   1.169    0.243 #> ind_4        0.864043   1.443200   0.599    0.549 #> ind_3       -0.845672   0.746346  -1.133    0.257 #> ind_2:ind_4 -3.759415   2.530815  -1.485    0.137 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 138.63  on 99  degrees of freedom #> Residual deviance: 132.66  on 95  degrees of freedom #> AIC: 142.66 #>  #> Number of Fisher Scoring iterations: 4 #>  #>                                                    formula      aic      bic #>   1:                     dependent ~ + ind_2*ind_4 + ind_3 142.6642 155.6900 #>   2: dependent ~ + ind_1*ind_3 + ind_1*ind_4 + ind_2*ind_3 148.7213 169.5627 #>   3: dependent ~ + ind_1*ind_3 + ind_1*ind_4 + ind_2*ind_4 147.2632 168.1045 #>   4: dependent ~ + ind_1*ind_4 + ind_2*ind_3 + ind_3*ind_4 148.7682 169.6095 #>   5:               dependent ~ + ind_1*ind_3 + ind_2*ind_4 146.0361 164.2723 #>  ---                                                                         #> 101:                           dependent ~ + ind_2 + ind_3 143.3091 151.1246 #> 102:                             dependent ~ + ind_1*ind_2 145.7626 156.1833 #> 103:                                   dependent ~ + ind_1 142.3067 147.5171 #> 104:                           dependent ~ + ind_1 + ind_2 144.2956 152.1111 #> 105:                                   dependent ~ + ind_2 142.6157 147.8260 #>      rSquare warn xIntercept     ind_1     ind_2     ind_3     ind_4 #>   1: 0.04303   NA 0.99879371        NA 0.2425186 0.2571796 0.5493734 #>   2: 0.04262   NA 0.04541425 0.2443264 0.3494632 0.1515630 0.1452893 #>   3: 0.05314   NA 0.42834597 0.2476006 0.2429556 0.2444968 0.9199705 #>   4: 0.04228   NA 0.06145366 0.3084528 0.3183979 0.1879855 0.1529568 #>   5: 0.04756   NA 0.68559088 0.4375617 0.2322962 0.2596381 0.4981064 #>  ---                                                                 #> 101: 0.00952   NA 0.40490059        NA 0.9209851 0.2558399        NA #> 102: 0.00625   NA 0.74950898 0.7016326 0.5445378        NA        NA #> 103: 0.00233   NA 0.62492764 0.5704972        NA        NA        NA #> 104: 0.00241   NA 0.66007836 0.5720661 0.9160959        NA        NA #> 105: 0.00010   NA 0.91928733        NA 0.9067320        NA        NA #>      ind_1.ind_2 ind_1.ind_3 ind_1.ind_4 ind_2.ind_3 ind_2.ind_4 ind_3.ind_4 #>   1:          NA          NA          NA          NA   0.1374229          NA #>   2:          NA   0.4988952   0.3644445          NA          NA          NA #>   3:          NA   0.4887728   0.3833383          NA          NA          NA #>   4:          NA          NA   0.3612624   0.3232267          NA          NA #>   5:          NA   0.5442002          NA          NA   0.1283179          NA #>  ---                                                                         #> 101:          NA          NA          NA          NA          NA          NA #> 102:   0.4668496          NA          NA          NA          NA          NA #> 103:          NA          NA          NA          NA          NA          NA #> 104:          NA          NA          NA          NA          NA          NA #> 105:          NA          NA          NA          NA          NA          NA #>      ind_3.ind_2 ind_4.ind_2 ind_4.ind_3 #>   1:          NA          NA          NA #>   2:   0.3679946          NA          NA #>   3:          NA   0.1391178          NA #>   4:          NA          NA   0.5226902 #>   5:          NA          NA          NA #>  ---                                     #> 101:          NA          NA          NA #> 102:          NA          NA          NA #> 103:          NA          NA          NA #> 104:          NA          NA          NA #> 105:          NA          NA          NA"},{"path":"/reference/summarise_all_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"A riff on `dplyr::summarise` that returns columns with values for all rows — summarise_all_rows","title":"A riff on `dplyr::summarise` that returns columns with values for all rows — summarise_all_rows","text":"riff `dplyr::summarise` returns columns values rows","code":""},{"path":"/reference/summarise_all_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A riff on `dplyr::summarise` that returns columns with values for all rows — summarise_all_rows","text":"","code":"summarise_all_rows(.data, ..., .groups = NULL)"},{"path":"/reference/summarise_all_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A riff on `dplyr::summarise` that returns columns with values for all rows — summarise_all_rows","text":".data, ..., .groups Takes arguments summarise","code":""},{"path":"/reference/summarise_all_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A riff on `dplyr::summarise` that returns columns with values for all rows — summarise_all_rows","text":"data.frame identical `.data` new columns representing   summarisations made grouping. Values new columns repeated   necessary maintain number rows original data.frame.","code":""},{"path":"/reference/summarise_all_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A riff on `dplyr::summarise` that returns columns with values for all rows — summarise_all_rows","text":"","code":"# Get mean mpg by number of cyl from mtcars mtcars |>   dplyr::group_by(cyl) |>   summarise_all_rows(mean_mpg = mean(mpg)) #> # A tibble: 32 × 12 #> # Groups:   cyl [3] #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb mean_mpg #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>    <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4     26.7 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4     26.7 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1     26.7 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1     26.7 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2     26.7 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1     26.7 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4     26.7 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2     26.7 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2     26.7 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4     26.7 #> # … with 22 more rows"}]
